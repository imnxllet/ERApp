package ER;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

/**
 * Record class is constructed by arrivaltime. It is meant to be stored in a map
 * for all the other records if it the Patient has more visits. The Record class
 * contains data about the Patient's heart rate, temperature and blood pressure.
 * 
 * @author Z.LU, L.CHEN, T.TRUONG, G.GUERRA.
 */
public class Record implements Serializable {
	/**
	 * This UID was generated by Eclipse.
	 */
	private static final long serialVersionUID = -1255988044805951931L;
	/**
	 * This is the blood pressure that stored in this Record.
	 */
	private TreeMap<String, String> bloodPressure;
	/**
	 * This is the heart rate that stored in this Record.
	 */
	private TreeMap<String, String> heartRate;
	/**
	 * This is the temperature that stored in this Record.
	 */
	private TreeMap<String, String> temperature;

	/**
	 * The time that patient arrived.
	 */
	protected String arrivaltime;

	/**
	 * Time when Patient seen by a doctor.
	 */
	private String seenByDoctor;

	/**
	 * Latest urgency point.
	 */
	private int urgency;

	/**
	 * Each record is indicated by arrivaltime.
	 * 
	 * @param time
	 *            The patient's arrival time.
	 */
	public Record(String time) {
		this.arrivaltime = time;
		this.setBloodPressure(new TreeMap<String, String>());
		this.setHeartRate(new TreeMap<String, String>());
		this.setTemperature(new TreeMap<String, String>());
		this.setSeenByDoctor("");
	}

	/**
	 * Takes each value of the bloodpressure of that specific record and returns
	 * into concatenated string.
	 * 
	 * @return The bloodpressures of the record.
	 */
	public String BPtoString() {
		String result = "";
		Iterator<Entry<String, String>> iter = getBloodPressure().entrySet()
				.iterator();
		while (iter.hasNext()) {
			Entry<String, String> entry = iter.next();
			result = result + entry.getKey() + ">" + entry.getValue() + "//";
		}
		return result;
	}

	/**
	 * Takes each value in the specific record of the Heartrate map and returns
	 * it into concatenated strings.
	 * 
	 * @return the heartrate(s) of this record.
	 */
	public String HRtoString() {
		String result = "";
		Iterator<Entry<String, String>> iter = getHeartRate().entrySet()
				.iterator();
		while (iter.hasNext()) {
			Entry<String, String> entry = iter.next();
			result = result + entry.getKey() + ">" + entry.getValue() + "//";
		}
		return result;
	}

	/**
	 * Takes each temperature in the temperature map of a specific record and
	 * returns it concatenated.
	 * 
	 * @return The temperature(s) of this record.
	 */
	public String TEMPtoString() {
		String result = "";
		Iterator<Entry<String, String>> iter = getTemperature().entrySet()
				.iterator();
		while (iter.hasNext()) {
			Entry<String, String> entry = iter.next();
			result = result + entry.getKey() + ">" + entry.getValue() + "//";
		}
		return result;
	}

	@Override
	/**
	 * Return the string representation of this Record.
	 * @return the arrivaltime, bloodPressure, heartRate and Temperature of this Record.
	 */
	public String toString() {
		return this.arrivaltime.toString() + "~" + BPtoString() + "~"
				+ HRtoString() + "~" + TEMPtoString() + "~" + getSeenByDoctor();
	}

	/**
	 * Return the temperature(s) of this record.
	 * 
	 * @return the Temperature of this Record.
	 */
	public Map<String, String> getTemperature() {
		return temperature;
	}

	/**
	 * Sets the Record's temperature.
	 * 
	 * @param temperature
	 *            This Record's temperature.
	 */
	public void setTemperature(TreeMap<String, String> temperature) {
		this.temperature = temperature;
	}

	/**
	 * Returns the heartrate of the patient at the given record.
	 * 
	 * @return The heart rate in this Records.
	 */
	public Map<String, String> getHeartRate() {
		return heartRate;
	}

	/**
	 * Sets the patient HR at a given record.
	 * 
	 * @param heartRate
	 *            this Record's heartrate.
	 */
	public void setHeartRate(TreeMap<String, String> heartRate) {
		this.heartRate = heartRate;
	}

	/**
	 * Returns the bloodpressure of the patient at the given record.
	 * 
	 * @return the blood pressure in this Record.
	 */
	public Map<String, String> getBloodPressure() {
		return bloodPressure;
	}

	/**
	 * Sets the bloodpressure of the patient at the given reoord.
	 * 
	 * @param bloodPressure
	 *            this Record's bloodpressure.
	 */
	public void setBloodPressure(TreeMap<String, String> bloodPressure) {
		this.bloodPressure = bloodPressure;
	}

	/**
	 * Updates the time that the Patient is seen by a doctor.
	 * 
	 * @param time
	 *            The time that the Patient is seen by a doctor.
	 */
	public void seenByDoc(String time) {
		this.setSeenByDoctor(time);
	}

	/**
	 * Return the Record variable SeenByDoctor.
	 * 
	 * @return the string of the time the patient's record when it has been seen
	 *         by a doctor.
	 */
	public String getSeenByDoctor() {
		return seenByDoctor;
	}

	/**
	 * Set the SeenByDoctor variable in its record to a string.
	 * 
	 * @param seenByDoctor
	 *            The string of the time that the Patient Record has been seen
	 *            by a doctor.
	 */
	public void setSeenByDoctor(String seenByDoctor) {
		this.seenByDoctor = seenByDoctor;
	}

	/**
	 * Updates the Patient Record with its urgency following the hospital
	 * policy.
	 */
	public void updateUrgency() {
		int result = 0;
		Integer recentTemp = 37;// Normal body temp.
		Integer recentHR = 70;// Normal heart rate.
		Integer systolic = 120;
		Integer diastolic = 80;
		// used down-casting because I do not mess up the Record.java, but we
		// might need to change the types for temperature/BP/HR from Map to
		// TreeMap if necesary.
		try {
			recentTemp = Integer.valueOf(temperature.lastEntry().getValue());
		} catch (Exception e) {

		}

		try {
			recentHR = Integer.valueOf(heartRate.lastEntry().getValue());
		} catch (Exception e) {

		}

		// recentBP has the formate of systolic/diastolic. (i.e. "120/90")
		try {
			String[] recentBP = bloodPressure.lastEntry().getValue().split("/");
			systolic = Integer.valueOf(recentBP[0]);
			diastolic = Integer.valueOf(recentBP[1]);
		} catch (Exception e) {

		}

		if (recentTemp >= 39.0) {
			result++;
		}
		if (systolic >= 140 || diastolic >= 90) {
			result++;
		}
		if (recentHR >= 100 || recentHR <= 50) {
			result++;
		}
		this.setUrgency(result);
	}

	/**
	 * Return the urgency of the Patient.
	 * 
	 * @return the Patient Urgency variable.
	 */
	public int getUrgency() {
		return urgency;
	}

	/**
	 * Set the urgency of the patient's urgency variable. *
	 * 
	 * @param urgency
	 *            The patient's urgency point.
	 */
	public void setUrgency(int urgency) {
		this.urgency = urgency;
	}
}