package ER;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Map.Entry;

/**
 * The Nurse class has all the access to the Patient Manage System.
 * 
 * @author Z.LU, L.CHEN, T.TRUONG, G.GUERRA.
 */
public class Nurse implements Serializable {

	/**
	 * This UID was generated by Eclipse.
	 */
	private static final long serialVersionUID = -7151473926330689821L;
	/**
	 * The looked up Patient.
	 */
	private Patient patient;
	/**
	 * The Patients' data base.
	 */
	private App patientdata;

	/**
	 * Constructs a Nurse.
	 */
	public Nurse() {
		this.setPatient(new Patient());
	}

	/**
	 * Looks up Patient's information by its health card number.
	 * 
	 * @param healthcardnum
	 *            The health card number of the Patient.
	 */
	public void searchPatient(String healthcardnum) {
		this.setPatient(getPatientdata().lookup(healthcardnum));
	}

	/**
	 * Returns The looked up Patient's general information.
	 * 
	 * @return The general information of the looked up Patient
	 */
	public String viewPatient() {
		String pres = "";
		if (!this.getPatient().getPrescription().isEmpty()) {
			Iterator<Entry<String, String>> iter = this.getPatient()
					.getPrescription().entrySet().iterator();
			while (iter.hasNext()) {
				Entry<String, String> entry = iter.next();
				pres = pres + "  Time recorded:" + entry.getKey()
						+ "\n  Instructions:" + entry.getValue() + "\n";
			}
		}
		return "Name: " + this.getPatient().getName() + "\n"
				+ "Date of birth: " + this.getPatient().getBirthDate() + "\n"
				+ "Health card number: "
				+ String.valueOf(this.getPatient().getHealthCardNum())
				+ "\nPrescription history:\n" + pres;
	}

	/**
	 * Creates a new Record with arrival time from time for the looked up
	 * Patient.
	 * 
	 * @param time
	 *            The time the patient arrived.
	 */
	public void createRecord(String time) {
		this.getPatient().getListOfRecords().put(time, new Record(time));
	}

	/**
	 * Updates the Patient's temperature from temp at a specific time with time,
	 * for specific record that is specified by the arrival time from arrival.
	 * 
	 * @param arrival
	 *            The time that displays on the record that requires updates.
	 * @param time
	 *            The time that the update is made.
	 * @param temp
	 *            The updating temperature.
	 */
	public void updateTemp(String arrival, String time, String temp) {
		Record r = this.getPatient().getListOfRecords().get(arrival);
		r.getTemperature().put(time, temp);
		this.getPatient().updateUrgency();
	}

	/**
	 * Updates the Patient's blood pressure from bp at a specific time with
	 * time, for specific record that is specified by the arrival time from
	 * arrival.
	 * 
	 * @param arrival
	 *            The time that displays on the record that requires updates.
	 * @param time
	 *            The time that the update is made.
	 * @param bp
	 *            The updating blood pressure.
	 */
	public void updateBP(String arrival, String time, String bp) {
		Record r = this.getPatient().getListOfRecords().get(arrival);
		r.getBloodPressure().put(time, bp);
		this.getPatient().updateUrgency();
	}

	/**
	 * Updates the Patient's heart rate from temp at a specific time with time,
	 * for specific record that is specified by the arrival time from arrival.
	 * 
	 * @param arrival
	 *            The time that displays on the record that requires updates.
	 * @param time
	 *            The time that the update is made.
	 * @param temp
	 *            The updating heart rate.
	 */
	public void updateHR(String arrival, String time, String hr) {
		Record r = this.getPatient().getListOfRecords().get(arrival);
		r.getHeartRate().put(time, hr);
		this.getPatient().updateUrgency();
	}

	/**
	 * Returns formatted string representation of all the Records for the looked
	 * up Patient.
	 * 
	 * @return The string representation of all the Records.
	 */
	public String viewRecords() {
		String display = "";

		if (!this.getPatient().getListOfRecords().isEmpty()) {
			Integer i = 0;
			for (Record r : this.getPatient().getListOfRecords().values()) {
				String bpdisplay = "";
				String hrdisplay = "";
				String tempdisplay = "";
				i = i + 1;
				if (!r.getBloodPressure().isEmpty()) {
					Iterator<Entry<String, String>> iter = r.getBloodPressure()
							.entrySet().iterator();
					while (iter.hasNext()) {
						Entry<String, String> entry = iter.next();
						bpdisplay = bpdisplay + "   time:" + entry.getKey()
								+ "  value:" + entry.getValue() + "\n";
					}
				}
				if (!r.getHeartRate().isEmpty()) {
					Iterator<Entry<String, String>> iter1 = r.getHeartRate()
							.entrySet().iterator();
					while (iter1.hasNext()) {
						Entry<String, String> entry = iter1.next();
						hrdisplay = hrdisplay + "   time:" + entry.getKey()
								+ "  value:" + entry.getValue() + "\n";
					}
				}
				if (!r.getTemperature().isEmpty()) {
					Iterator<Entry<String, String>> iter2 = r.getTemperature()
							.entrySet().iterator();
					while (iter2.hasNext()) {
						Entry<String, String> entry = iter2.next();
						tempdisplay = tempdisplay + "   time:" + entry.getKey()
								+ "  value:" + entry.getValue() + "\n";
					}
				}
				r.updateUrgency();
				display = display + "Rcord #" + i.toString()
						+ "\nArrival Time: " + r.getArrivaltime() + "\n"
						+ "Blood Pressure records: " + "\n" + bpdisplay + "\n"
						+ "Heart Rate records: " + "\n" + hrdisplay + "\n"
						+ "Temperature records: " + "\n" + tempdisplay + "\n"
						+ "Time seen by a doctor: " + r.getSeenByDoctor()
						+ "\n" + "Urgency point: " + r.getUrgency() + "\n\n";
			}
			return display;
		} else {
			return "No records!";
		}
	}

	/**
	 * Returns the patients' data base.
	 * 
	 * @return The data base of patients.
	 */
	public App getPatientdata() {
		return this.patientdata;
	}

	/**
	 * Sets the patients' data base with patientdata.
	 */
	public void setPatientdata(App patientdata) {
		this.patientdata = patientdata;
	}

	/**
	 * Returns the looked up Patient.
	 * 
	 * @return The looked up Patient.
	 */
	public Patient getPatient() {
		return patient;
	}

	/**
	 * Sets the looked up Patient.
	 */
	public void setPatient(Patient patient) {
		this.patient = patient;
	}

	/**
	 * This method verifies if the specific patient requested is in the list.
	 * The method checks for the Name variable and returns true if there is a
	 * match.
	 * 
	 * @param p
	 *            The patient that is requeted for search.
	 * @param list
	 *            The list of patients to be consulted.
	 * @return boolean true or false depending on whether the patient was found
	 *         or not.
	 */
	public boolean checkIfPatientExist(Patient p, ArrayList<Patient> list) {
		boolean result = false;
		if (list.isEmpty()) {
			result = false;
		} else {
			for (Patient pa : list) {
				if (p.getName().equals(pa.getName())) {
					result = true;
				}
			}
		}
		return result;
	}

	/**
	 * This method removes patients who have already been visited by a doctor
	 * The ones that have NOT been visited are sorted based on their urgency
	 * point.
	 * 
	 * @param patientList
	 *            The list of patients which contains both visited and
	 *            non-visited patients.
	 * @return the sorted list of patients not visited by a doctor.
	 */
	public ArrayList<Patient> removeThoseVisited(ArrayList<Patient> patientList) {
		ArrayList<Patient> result = new ArrayList<Patient>();
		ArrayList<Patient> finalresult = new ArrayList<Patient>();
		// ArrayList<Patient> sorted = new ArrayList<Patient>();

		// create a list with all the patients and their records
		ListIterator<Patient> li = patientList.listIterator(patientList.size());
		while (li.hasPrevious()) {
			Patient p = li.previous();
			if (checkIfPatientExist(p, result) == false) {
				result.add(p);
			}
		}
		for (Patient p : result) {
			if (p.getListOfRecords().lastEntry().getValue().getSeenByDoctor() == "") {
				p.updateUrgency();
				finalresult.add(p);
			}
		}

		Collections.sort(finalresult);
		return finalresult;
	}

	/**
	 * This method converts the sorted list of patients not yet visited to
	 * string format for output.
	 * 
	 * @param patientList
	 *            The list of patients that have not yet been seen by a doctor,
	 *            sorted.
	 * @return The list in string format.
	 */
	public String waitListToString(ArrayList<Patient> patientList) {
		String result = "";
		for (Patient p : patientList) {
			p.updateUrgency();
			result += "Name: " + p.getName() + "\nDate of birth: "
					+ p.getBirthDate() + "\nHealth Card Number: "
					+ p.getHealthCardNum() + "\nUrgency Point: "
					+ p.getUrgency() + "\n\n";
		}
		return result;
	}
}