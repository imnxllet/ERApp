package ER;

import java.util.ArrayList;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Serializable;
import java.util.Scanner;

/**
 * The app class maintain a database of the patients objects.
 * 
 * @author Z.LU, L.CHEN, T.TRUONG, G.GUERRA.
 */
public class App implements Serializable {
	/**
	 * This UID was generated by Eclipse.
	 */
	private static final long serialVersionUID = 4161336645944709162L;

	/**
	 * A list containing all patients.
	 */
	private ArrayList<Patient> patientList;

	/**
	 * Constructs an App from a file dir with filename fileName and throws an
	 * IOException if the file isn't found.
	 * 
	 * @param dir
	 *            The file being read that contains all patients data.
	 * @param fileName
	 *            The name of the file being read.
	 */
	public App(File dir, String fileName) throws IOException {
		this.setPatientList(new ArrayList<Patient>());
		File file = new File(dir, fileName);
		if (file.exists()) {
			this.populate(file.getPath());
		} else {
			file.createNewFile();
		}
	}

	/**
	 * Looks up and returns a patient by his/her health card number healthcard
	 * in the patientList.
	 * 
	 * @param healthcard
	 *            Health card number a patient.
	 * @return The patient with this health card number.
	 */
	public Patient lookup(String healthcard) {
		Patient p = null;
		for (Patient patient : getPatientList()) {
			if (patient.getHealthCardNum().equals(healthcard)) {
				p = patient;
			}
		}
		return p;
	}

	/**
	 * Appends a Patient to patientList.
	 * 
	 * @param patient
	 *            A Patient that will be added.
	 */
	public void add(Patient patient) {
		getPatientList().add(patient);
	}

	/**
	 * Reads a file, populating the list of patients(App.patientList) from it
	 * and.
	 * 
	 * @param filePath
	 *            The name of the file.
	 */

	private void populate(String filePath) throws FileNotFoundException {
		Scanner scanner = new Scanner(new FileInputStream(filePath));
		String[] info;
		while (scanner.hasNextLine()) {
			info = scanner.nextLine().split(",");
			String name = info[1];
			String dob = info[2];
			String healthCard = info[0];
			Patient p = new Patient(name, dob, healthCard);
			try {
				String[] listOfPres = info[3].split(";");
				for (String pres : listOfPres) {
					String[] timeAndPres = pres.split(">");
					p.getPrescription().put(timeAndPres[0],
							timeAndPres[1].replace("/", ","));
				}
			} catch (Exception e) {

			}
			try {
				String[] listOfRecords = info[4].split(";");
				for (String record : listOfRecords) {
					String[] elements = record.split("~");
					String time = elements[0];
					Record re = new Record(time);
					try {
						String[] subBP = elements[1].split("//");
						for (String BP : subBP) {
							String[] timeAndBP = BP.split(">");
							if (timeAndBP.length != 0) {
								re.getBloodPressure().put(timeAndBP[0],
										timeAndBP[1]);
							}
						}
					} catch (Exception e) {
					}
					try {
						String[] subHR = elements[2].split("//");
						for (String HR : subHR) {
							String[] timeAndHR = HR.split(">");
							if (timeAndHR.length != 0) {
								re.getHeartRate().put(timeAndHR[0],
										timeAndHR[1]);
							}
						}
					} catch (Exception e) {
					}
					try {
						String[] subTEMP = elements[3].split("//");
						for (String TEMP : subTEMP) {
							String[] timeAndTEMP = TEMP.split(">");
							if (timeAndTEMP.length != 0) {
								re.getTemperature().put(timeAndTEMP[0],
										timeAndTEMP[1]);
							}
						}
					} catch (Exception e) {
					}
					try {
						String seen = elements[4];
						re.setSeenByDoctor(seen);

					} catch (Exception e) {
					}
					p.listOfRecords.put(time, re);
				}
			} catch (Exception e) {
			}
			getPatientList().add(p);
		}
		scanner.close();
	}

	/**
	 * Gets and returns the patientList.
	 * 
	 * @return A list of patients.
	 */
	public ArrayList<Patient> getPatientList() {
		return patientList;
	}

	/**
	 * Gets and returns the patientList.
	 * 
	 * @return A list of patients.
	 */
	public void setPatientList(ArrayList<Patient> patientList) {
		this.patientList = patientList;
	}
}